One of the key learnings was the deep dive into OOP concepts such as inheritance, encapsulation, and polymorphism, especially in the context of creating a robust system that handles patients in a healthcare setting. 

In the development of the Pre-Triage application, the principle of code reusability emerged as a cornerstone of efficient and maintainable software design, largely facilitated by the use of inheritance. Inheritance allowed for the creation of a hierarchical structure where common functionalities were centralized within a base class, such as IOAble, from which more specialized classes like Patient, TestPatient, and TriagePatient could derive. This architectural choice significantly reduced code duplication, as shared behaviors and attributes were implemented once in the base class and then inherited by all derived classes, embodying the "write once, use many" philosophy.

Moreover, the ability to override and extend base class functionalities in derived classes without altering the original codebase underscored the flexibility and extensibility that inheritance brings to object-oriented programming. This not only streamlined the development process but also facilitated future enhancements and modifications to the system. For instance, adding new types of patients or modifying patient handling processes could be achieved with minimal changes to the existing code, thus preserving the integrity of the application while accommodating growth and evolution. The utilization of inheritance in the Pre-Triage application exemplifies how code reusability can lead to more scalable and adaptable software solutions, showcasing the pragmatic benefits of leveraging OOP principles in complex systems development. 

The challenge of managing dynamic memory across base and derived classes illuminated the critical importance of the rule of three, underscoring the nuances of copy control to prevent memory leaks and ensure the integrity of the program. Additionally, the exploration of templates for generic programming and the practical application of error handling and input validation strategies emphasized the importance of creating resilient and user-friendly applications.

Among the challenges encountered, the formatting discrepancy between Visual Studio and the matrix server, due to the differential use of '\n' and std::endl, was particularly enlightening. This challenge highlighted the subtle yet impactful differences between inserting a newline character and flushing the output buffer, a distinction crucial for ensuring consistent program output across various environments. Furthermore, navigating the intricacies of inheritance to maintain a seamless flow of data and functionality between base and derived classes posed another significant learning curve. Delving into the mechanics of initializer lists, virtual functions, and pure virtual functions offered a comprehensive understanding of how C++ facilitates sophisticated class hierarchies and polymorphic behavior.
